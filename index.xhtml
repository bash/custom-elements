<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="UTF-8" />
    <title>custom-elements</title>
</head>
<body xmlns:foo="http://www.w3.org/1999/xhtml">
<foo-bar foo="hello world"></foo-bar>
<foo-bar foo="hello world" foo:bar="bar"></foo-bar>

<input is="extended-input" />
<script src="./dist/custom-elements.js"></script>
<script>

    window.customElements.whenDefined('foo-bar')
            .then(() => {
        console.log('foo-bar defined')
        console.log(window.customElements.get('foo-bar'))
        console.log(document.querySelector('foo-bar').foo)
    })

    window.customElements.whenDefined('extended-input')
            .then(() => {
        console.log(document.querySelector('input').foobar())
    })

    class FooBar extends HTMLElement {
        constructor () {
            super()
        }

        connectedCallback () {
            console.log('connected', this)
        }

        disconnectedCallback () {
            console.log('disconnected', this)
        }

        attributeChangedCallback (name, oldValue, newValue, namespace) {
            console.log('attribute changed')
            console.log([name, oldValue, newValue, namespace])
        }

        get foo () {
            return this.getAttribute('foo')
        }

        static get observedAttributes () {
            return new Set(['foo', 'bar'])
        }
    }

    class ExtendedInput extends HTMLInputElement {
        constructor () {
            super()

            console.log('constructed')
        }

        connectedCallback () {
            console.log('connected', this)
        }

        foobar () {
            console.log('foobar called')
        }
    }

    window.customElements.define('foo-bar', FooBar)
    window.customElements.define('extended-input', ExtendedInput, { extends: 'input' })

</script>
</body>
</html>
